1. Double Decorator

from functools import wraps

def double(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        if isinstance(result, (int, float)):
            return result * 2
        return result
    return wrapper


2. Check Numeric Decorator

from functools import wraps
from numbers import Number

def check_numeric(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        if not all(isinstance(arg, Number) for arg in args):
            raise ValueError("All arguments must be numeric.")
        return func(*args, **kwargs)
    return wrapper

3.Enforce Type Decorator (Function)


from functools import wraps

def enforce_type(enforced_type):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if not all(isinstance(arg, enforced_type) for arg in args):
                raise ValueError(f"All arguments must be of type {enforced_type.__name__}.")
            return func(*args, **kwargs)
        return wrapper
    return decorator

4.Enforce Type Decorator (Class)

class EnforceType:
    def __init__(self, enforced_type):
        self.enforced_type = enforced_type

    def __call__(self, func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            if not all(isinstance(arg, self.enforced_type) for arg in args):
                raise ValueError(f"All arguments must be of type {self.enforced_type.__name__}.")
            return func(*args, **kwargs)
        return wrapper


5.Memoize Decorator

from functools import wraps

def memoize(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        if not hasattr(wrapper, "previous_calls"):
            wrapper.previous_calls = []
        result = func(*args, **kwargs)
        wrapper.previous_calls.append({"arguments": args, "result": result})
        return result
    return wrapper
